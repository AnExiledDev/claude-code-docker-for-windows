version: '3.8'

networks:
  devcontainer-network:
    driver: bridge

volumes:
  # Persistent data volumes for observability stack
  prometheus-data:
  grafana-data:
  loki-data:
  # Development environment volumes
  claude-code-bashhistory:

services:
  # Main development container
  claude-code-dev:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        TZ: "${TZ:-America/Los_Angeles}"
        TAVILY_API_KEY: "${TAVILY_API_KEY}"
        REF_TOOLS_API_KEY: "${REF_TOOLS_API_KEY}"
    container_name: claude-code-dev
    volumes:
      - ../:/workspace:cached
      - claude-code-bashhistory:/commandhistory
      - ../.claude:/home/node/.claude
      - ../.serena:/home/node/.serena
    working_dir: /workspace
    command: sleep infinity
    tty: true
    stdin_open: true
    networks:
      - devcontainer-network
    environment:
      # Existing environment variables
      - NODE_OPTIONS=--max-old-space-size=4096
      - CLAUDE_CONFIG_DIR=/home/node/.claude
      - POWERLEVEL9K_DISABLE_GITSTATUS=true
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - REF_TOOLS_API_KEY=${REF_TOOLS_API_KEY}
      # Claude Code telemetry configuration
      - CLAUDE_CODE_ENABLE_TELEMETRY=1
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_METRIC_EXPORT_INTERVAL=30000
      - OTEL_LOGS_EXPORT_INTERVAL=5000
      - OTEL_LOG_USER_PROMPTS=1
      # Cardinality control
      - OTEL_METRICS_INCLUDE_SESSION_ID=true
      - OTEL_METRICS_INCLUDE_VERSION=false
      - OTEL_METRICS_INCLUDE_ACCOUNT_UUID=true
    cap_add:
      - NET_ADMIN
      - NET_RAW

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel/collector-config.yaml"]
    volumes:
      - ./observability/collector-config.yaml:/etc/otel/collector-config.yaml:ro
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
      - "8889:8889"  # Prometheus metrics endpoint
      - "13133:13133" # Health check endpoint
    restart: unless-stopped
    networks:
      - devcontainer-network

  # Prometheus metrics storage
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - devcontainer-network

  # Loki log aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
    restart: unless-stopped
    networks:
      - devcontainer-network

  # Grafana visualization
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE=logsSampleInExplore
      - GF_INSTALL_PLUGINS=grafana-polystat-panel
    volumes:
      - ./observability/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./observability/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./observability/claude-code-dashboard.json:/var/lib/grafana/dashboards/claude-code-dashboard.json:ro
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_started  
      loki:
        condition: service_started
    networks:
      - devcontainer-network
